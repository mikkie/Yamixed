<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:util="http://www.springframework.org/schema/util" xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:jpa="http://www.springframework.org/schema/data/jpa" xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd
  http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
  http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-3.2.xsd
  http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd
  http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.2.xsd
  http://www.springframework.org/schema/data/jpa http://www.springframework.org/schema/data/jpa/spring-jpa.xsd"
	default-lazy-init="true">

	<context:component-scan base-package="com.yamixed">
		<context:exclude-filter type="annotation"
			expression="org.springframework.stereotype.Controller" />
	</context:component-scan>

	<bean id="entityManagerFactory"
		class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="persistenceUnitName" value="defaultPU" />
		<property name="jpaVendorAdapter" ref="hibernateJpaVendorAdapter" />
		<property name="jpaProperties">
			<props>
				<prop key="hibernate.dialect">${db.dialect}</prop>
				<prop key="hibernate.cache.region.factory_class">org.hibernate.cache.ehcache.EhCacheRegionFactory
				</prop>
				<prop key="net.sf.ehcache.configurationResourceName">ehcache/ehcache-hibernate-local.xml</prop>
				<prop key="hibernate.ejb.naming_strategy">org.hibernate.cfg.ImprovedNamingStrategy</prop>
				<prop key="hibernate.jdbc.use_scrollable_resultset">false</prop>
				<prop key="hibernate.show_sql">true</prop>
			</props>
		</property>
	</bean>

	<bean id="hibernateJpaVendorAdapter"
		class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter" />

	<!-- Spring Data Jpa配置 -->
	<jpa:repositories base-package="com.yamixed"
		transaction-manager-ref="transactionManager"
		entity-manager-factory-ref="entityManagerFactory" />

	<!-- Jpa 事务配置 -->
	<bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager">
		<property name="entityManagerFactory" ref="entityManagerFactory" />
	</bean>

	<!-- 使用annotation定义事务 -->
	<tx:annotation-driven transaction-manager="transactionManager"
		proxy-target-class="true" />

	<!-- production/local development环境 -->
	<beans profile="production,development">
		<context:property-placeholder
			ignore-unresolvable="true" location="classpath*:/jdbc.properties" />

		<!-- 数据源配置, 使用应用中的DBCP数据库连接池 -->
		<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource"
			destroy-method="close">
			<property name="driverClass" value="${db.driver}" />
			<property name="jdbcUrl" value="${db.yamixed.url}" />
			<property name="user" value="${db.user}" />
			<property name="password" value="${db.password}" />
			<!--当连接池中的连接用完时，C3P0一次性创建新连接的数目 -->
			<property name="acquireIncrement" value="${db.acquireIncrement}" />
			<!-- 定义在从数据库获取新连接失败后重复尝试获取的次数，默认为30 -->
			<property name="acquireRetryAttempts" value="${db.acquireRetryAttempts}" />
			<!-- 两次连接中间隔时间，单位毫秒，默认为1000 -->
			<property name="acquireRetryDelay" value="${db.acquireRetryDelay}" />
			<!-- 连接关闭时默认将所有未提交的操作回滚。默认为false -->
			<property name="autoCommitOnClose" value="${db.autoCommitOnClose}" />
			<!-- 获取连接失败将会引起所有等待获取连接的线程抛出异常。但是数据源仍有效保留，并在下次调 用getConnection()的时候继续尝试获取连接。如果设为true，那么在尝试获取连接失败后该数据源将申明已断开并永久关闭。默认为 
				false； -->
			<property name="breakAfterAcquireFailure" value="${db.breakAfterAcquireFailure}" />
			<!-- 当连接池用完时客户端调用getConnection()后等待获取新连接的时间，超时后将抛出SQLException，如设为0则无限期等待。单位毫秒，默认为0； -->
			<property name="checkoutTimeout" value="${db.checkoutTimeout}" />
			<!-- 始化时创建的连接数，应在minPoolSize与maxPoolSize之间取值。默认为3； -->
			<property name="initialPoolSize" value="${db.initialPoolSize}" />
			<!-- 最大空闲时间，超过空闲时间的连接将被丢弃。为0或负数则永不丢弃。默认为0； -->
			<property name="maxIdleTime" value="${db.maxIdleTime}" />
			<!-- 接池中保留的最大连接数。默认为15 -->
			<property name="maxPoolSize" value="${db.maxPoolSize}" />
			<!-- JDBC的标准参数，用以控制数据源内加载的PreparedStatement数量。但由于预缓存的Statement属 于单个Connection而不是整个连接池。所以设置这个参数需要考虑到多方面的因素，如果maxStatements与 
				maxStatementsPerConnection均为0，则缓存被关闭。默认为0； -->
			<property name="maxStatements" value="${db.maxStatements}" />
			<!-- 连接池内单个连接所拥有的最大缓存Statement数。默认为0； -->
			<property name="maxStatementsPerConnection" value="${db.maxStatementsPerConnection}" />
			<!--C3P0是异步操作的，缓慢的JDBC操作通过帮助进程完成。扩展这些操作可以有效的提升性能，通过多线程实现多个操作同时被执行。默认为3； -->
			<property name="numHelperThreads" value="${db.numHelperThreads}" />
			<!-- 用户修改系统配置参数执行前最多等待的秒数。默认为300； -->
			<property name="propertyCycle" value="${db.propertyCycle}" />
		</bean>
	</beans>

</beans>